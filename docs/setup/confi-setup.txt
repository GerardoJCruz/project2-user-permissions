1- Connect to EC2 (Amazon Linux for this example)

Launch an EC2 instances and keep the Key Pair to securely connect to your instance. 

# Protects your private key so SSH refuses insecure keys 
chmod 400 mykey.pem
#Connect to your instance using the key for authentication. 
ssh -i mykey.pem ec2-user@<ec2-ip> # ec2-user is usually the default user for EC2 instances. 

---------------------------------------------------------------------------------------------------------------------

2- Create groups

groupadd is a command that helps to create new group accounts. 

#For this examples the groups devops, developers & auditors. 
sudo groupadd devops
sudo groupadd developers
sudo groupadd auditors

---------------------------------------------------------------------------------------------------------------------

3- Create users, their home directories and setup their shells. 

# create alice in devops
sudo useradd -m -s /bin/bash -G devops alice
sudo passwd alice   

# useradd -m creates a home directory for the new user /home/alice
# s /bin/bash sets the login shell
# -G adds the user to supplementary groups
# passwd set an account password for authentication only and is not required if a key is used. 

# create bob in developers
sudo useradd -m -s /bin/bash -G developers bob
sudo passwd bob

----------------------------------------------------------------------------------------------------------------------

4- Create a local keypair for each new user (bob and alice)

#create keypair
ssh-keygen -t ed25519 -C "alice@example.com" -f ~/.ssh/alice_ed25519
ssh-keygen -t ed25519 -C "bob@example.com" -f ~/.ssh/bob_ed25519

#Copy the public key to the server - since alice and bob don't have key ssh acces, you must log in as ec2-user 
scp -i project2-key.pem ~/.ssh/bob_id_ed25519.pub ec2-user@<ec2-ip>:/tmp/bob.pub
scp -i project2-key.pem ~/.ssh/alice_id_ed25519.pub ec2-user@<ec2-ip>:/tmp/alice.pub

#Access into the EC2 instances using the ec2-user
ssh i mykey.pem ec2-user@<ec2-ip>

#Configure on the server the .ssh directory and move the public key into place. In this case we'll use bob user as example. Same configuration applies to alice. 

sudo mkdir -p /home/bob/.ssh
sudo chmod 700 /home/bob/.ssh
sudo chown bob:bob /home/bob/.ssh

sudo mv /tmp/bob.pub /home/bob/.ssh/authorized_keys
sudo chmod 600 /home/bob/.ssh/authorized_keys
sudo chown bob:bob /home/bob/.ssh/authorized_keys

--------------------------------------------------------------------------------------------------------------------

5- Grant sudo (wheel) for alice. 

#Add alice to wheel (RHWL/Amazon convention) usermod -aG appends user to wheel (commonly allowed to sudo)
sudo usermod -aG wheel alice

--------------------------------------------------------------------------------------------------------------------

Create a shared project directory (setgid & ACLs)

#Set up /srv/projectA for team collaboration so new files inherit the group
sudo mkdir -p /srv/projectA
sudo chown root:devops /srv/projectA

# chmod 2775 sets setgid so created files/dris inside inherit the group's ID (devops)
sudo chmod 2775 /srv/projectA  # setgid 2

#Default ACLs: setfacl -d sets default ACLs so newly-created files get the specified permissions.
sudo setfactl -R -m g:devops:rwx /srv/projectA, setfacl -R -d -m g:devops:rwx /srv/projectA

--------------------------------------------------------------------------------------------------------------------

7- Restric SSH logins with AllowGroups 

#sshuser will allow the users inside this group to conect through SSH
sudo groudadd -f sshuser
sudo usermod -aG sshuser alice #Replace username with alic, bob, david or the user su prefer
sudo usermod -aG sshuser bob

#Add AllowGroup to sshd_config (append if missing)
if ! sudo grep -q '^AllowGroups' /etc/ssh/sshd_config; then
	echo "AllowGroups sshuser" | sudo tee -a /etc/ssh/sshd_config
fi
sudo systemctl restart sshd
